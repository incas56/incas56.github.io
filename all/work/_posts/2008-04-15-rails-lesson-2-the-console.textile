---
layout: post
title: "Rails Lesson #2: The Console"
---

h2. {{ page.title }}

p(publish_date). 22 Apr 2008

<notextile>
<p>In <a href="/2008/04/14/yet-another-rails-tutorial.html">Lesson #1</a> We had a cookbook and a recipe but they weren't related to each other.  First we'll add a key to the recipes table then we'll use the console to relate the entities.</p>

<p>When creating new objects we use the script/generate scaffold command.  Here we only want to change the existing recipes table so we generate a migration:</p>
<pre class="terminal">
$ script/generate migration add_cookbook_id_to_recipes
</pre>
<p>
This will create a file in the db/migrate folder called 003_add_cookbook_id_to_recipes.rb
</p>
<p>
Open this file using your editor of choice and add the add_column and remove_column lines so that your file looks like the code below:
</p>
<pre name="code" class="ruby">
class AddCookBookIdToRecipes < ActiveRecord::Migration
  def self.up
    add_column :recipes, :cookbook_id, :integer
  end

  def self.down
    remove_column :recipes, :cookbook_id
  end
end
</pre>

Now rake the migration:
<pre class="terminal">$ rake db:migrate</pre>

Now that we have a foreign key in the table we need to tell the CookBook model that it has many Recipes and the Recipe model that it belongs to a CookBook.  So we open the model files in the app/model directory and add the lines shown below.

<pre class="ruby">install.packages('plyr')
rnorm(10)
x <- 1:10</pre>


<pre name="code" class="xml">
install.packages('plyr')
rnorm(10)
x <- 1:10
</pre>

<pre name="code" class="sql"> select * from dba where x = 3 </pre>
<pre name="code" class="Sql"> select * from dba where x = 4 </pre>
Now the models are all wired up and ready for action.  Let's start by associating the recipe record we created with the cookbook record.  We could access the database and populate the field but it's a lot more fun to use the rails console.  Go back to your terminal window and type:


<pre class="brush: r">
install.packages('plyr')
rnorm(10)
x <- 1:10
for(i in 1:10)
y <- function() 1+2
</pre>

atabase and populate the field but it's a lot mo

<pre class="R">
install.packages('plyr')
rnorm(100)
x <- 1:10
z = c(1,2,3)
for(i in 1:10)
</pre>
